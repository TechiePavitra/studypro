import streamlit as st
import pandas as pd
import os
from utils.gujarati_text import GujaratiText
from utils.csv_handler import CSVHandler

# Page configuration
st.set_page_config(
    page_title="StudyPro - GSEB 12th Study Material Generator",
    page_icon="ЁЯУЪ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize Gujarati text helper
gt = GujaratiText()

# Initialize session state
if 'questions_df' not in st.session_state:
    st.session_state.questions_df = pd.DataFrame()
if 'subjects' not in st.session_state:
    st.session_state.subjects = []
if 'csv_handler' not in st.session_state:
    st.session_state.csv_handler = CSVHandler()

def load_subjects():
    """Load subjects from subjects.txt file"""
    try:
        if os.path.exists('subjects.txt'):
            with open('subjects.txt', 'r', encoding='utf-8') as f:
                subjects = [line.strip() for line in f.readlines() if line.strip()]
                st.session_state.subjects = subjects
        else:
            # Create default subjects file
            default_subjects = [
                "ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)",
                "ркЕркВркЧрлНрк░рлЗркЬрлА (English)", 
                "ркЧркгрк┐ркд (Mathematics)",
                "ркнрлМркдрк┐ркХрк╢рк╛рк╕рлНркдрлНрк░ (Physics)",
                "рк░рк╕рк╛ркпркгрк╢рк╛рк╕рлНркдрлНрк░ (Chemistry)",
                "ркЬрлАрк╡рк╡рк┐ркЬрлНркЮрк╛рки (Biology)",
                "ркЗркдрк┐рк╣рк╛рк╕ (History)",
                "ркнрлВркЧрлЛрк│ (Geography)",
                "ркЕрк░рлНркерк╢рк╛рк╕рлНркдрлНрк░ (Economics)",
                "рк░рк╛ркЬркХрк╛рк░ркг (Political Science)"
            ]
            with open('subjects.txt', 'w', encoding='utf-8') as f:
                for subject in default_subjects:
                    f.write(f"{subject}\n")
            st.session_state.subjects = default_subjects
    except Exception as e:
        st.error(f"Error loading subjects: {str(e)}")

def main():
    # Load subjects on startup
    load_subjects()
    
    # Header
    st.title("ЁЯУЪ StudyPro - GSEB 12th Study Material Generator")
    st.markdown("### ркЧрлБркЬрк░рк╛ркд ркорк╛ркзрлНркпркорк┐ркХ ркЕркирлЗ ркЙркЪрлНркЪркдрк░ ркорк╛ркзрлНркпркорк┐ркХ рк╢рк┐ркХрлНрк╖ркг ркмрлЛрк░рлНркб ркорк╛ркЯрлЗ ркЕркнрлНркпрк╛рк╕ рк╕рк╛ркоркЧрлНрк░рлА ркЬркирк░рлЗркЯрк░")
    
    # Sidebar navigation
    st.sidebar.title("ЁЯУЛ Navigation / ркирлЗрк╡рк┐ркЧрлЗрк╢рки")
    
    page = st.sidebar.selectbox(
        "Select Page / рккрлЗркЬ рккрк╕ркВркж ркХрк░рлЛ:",
        [
            "ЁЯПа Home / рк╣рлЛрко",
            "ЁЯУЭ Question Management / рккрлНрк░рк╢рлНрки рк╡рлНркпрк╡рк╕рлНркерк╛рккрки", 
            "ЁЯУД Paper Generator / рккрлЗрккрк░ ркЬркирк░рлЗркЯрк░",
            "ЁЯФН Question Scanner / рккрлНрк░рк╢рлНрки рк╕рлНркХрлЗркирк░"
        ]
    )
    
    # Main content based on selected page
    if page == "ЁЯПа Home / рк╣рлЛрко":
        show_home()
    elif page == "ЁЯУЭ Question Management / рккрлНрк░рк╢рлНрки рк╡рлНркпрк╡рк╕рлНркерк╛рккрки":
        import pages.question_management as qm
        qm.show_question_management()
    elif page == "ЁЯУД Paper Generator / рккрлЗрккрк░ ркЬркирк░рлЗркЯрк░":
        import pages.paper_generator as pg
        pg.show_paper_generator()
    elif page == "ЁЯФН Question Scanner / рккрлНрк░рк╢рлНрки рк╕рлНркХрлЗркирк░":
        import pages.question_scanner as qs
        qs.show_question_scanner()

def show_home():
    """Display home page with overview and quick stats"""
    
    # Welcome section
    st.header("ЁЯОУ Welcome to StudyPro / StudyPro ркорк╛ркВ ркЖрккркирлБркВ рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        ### ЁЯМЯ Features / рк▓ркХрлНрк╖ркгрлЛ:
        - **Question Management** / рккрлНрк░рк╢рлНрки рк╡рлНркпрк╡рк╕рлНркерк╛рккрки
        - **Automated Paper Generation** / рк╕рлНрк╡ркЪрк╛рк▓рк┐ркд рккрлЗрккрк░ ркЬркирк░рлЗрк╢рки
        - **PDF Export** / PDF ркирк┐ркХрк╛рк╕
        - **Gujarati Language Support** / ркЧрлБркЬрк░рк╛ркдрлА ркнрк╛рк╖рк╛ рк╕рккрлЛрк░рлНркЯ
        - **Question Importance Levels** / рккрлНрк░рк╢рлНрки ркорк╣ркдрлНрк╡ркирк╛ рк╕рлНркдрк░рлЛ
        - **Subject-wise Organization** / рк╡рк┐рк╖ркп рккрлНрк░ркорк╛ркгрлЗ рк╕ркВркЧркарки
        """)
    
    with col2:
        st.markdown("""
        ### ЁЯУК Quick Stats / ркЭркбрккрлА ркЖркВркХркбрк╛:
        """)
        
        # Load and display stats
        try:
            if os.path.exists('sample_questions.csv'):
                df = pd.read_csv('sample_questions.csv')
                st.metric("Total Questions / ркХрлБрк▓ рккрлНрк░рк╢рлНркирлЛ", len(df))
                st.metric("Available Subjects / ркЙрккрк▓ркмрлНркз рк╡рк┐рк╖ркпрлЛ", len(st.session_state.subjects))
                
                if 'importance' in df.columns:
                    important_count = len(df[df['importance'] == 'Most Important'])
                    st.metric("Most Important Questions / рк╕рлМркерлА ркорк╣ркдрлНрк╡рккрлВрк░рлНркг рккрлНрк░рк╢рлНркирлЛ", important_count)
            else:
                st.info("No questions database found. Please upload or create questions.")
        except Exception as e:
            st.error(f"Error loading statistics: {str(e)}")
    
    # Quick actions
    st.header("тЪб Quick Actions / ркЭркбрккрлА ркХрлНрк░рк┐ркпрк╛ркУ")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("ЁЯУЭ Add Questions / рккрлНрк░рк╢рлНркирлЛ ркЙркорлЗрк░рлЛ", use_container_width=True):
            st.switch_page("pages/question_management.py")
    
    with col2:
        if st.button("ЁЯУД Generate Paper / рккрлЗрккрк░ ркмркирк╛рк╡рлЛ", use_container_width=True):
            st.switch_page("pages/paper_generator.py")
    
    with col3:
        if st.button("ЁЯФН Scan Questions / рккрлНрк░рк╢рлНркирлЛ рк╕рлНркХрлЗрки ркХрк░рлЛ", use_container_width=True):
            st.switch_page("pages/question_scanner.py")
    
    # CSV Upload section
    st.header("ЁЯУд Upload Question Database / рккрлНрк░рк╢рлНрки ркбрлЗркЯрк╛ркмрлЗрк╕ ркЕрккрк▓рлЛркб ркХрк░рлЛ")
    
    uploaded_file = st.file_uploader(
        "Choose CSV file / CSV рклрк╛ркЗрк▓ рккрк╕ркВркж ркХрк░рлЛ:",
        type=['csv'],
        help="Upload a CSV file containing questions with columns: subject, question_type, question, options, correct_answer, importance, diagram_required"
    )
    
    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            
            # Validate required columns
            required_columns = ['subject', 'question_type', 'question', 'importance']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                st.error(f"Missing required columns: {', '.join(missing_columns)}")
            else:
                # Save the uploaded file
                df.to_csv('sample_questions.csv', index=False)
                st.session_state.questions_df = df
                st.success(f"Successfully uploaded {len(df)} questions! / рк╕рклрк│ркдрк╛рккрлВрк░рлНрк╡ркХ {len(df)} рккрлНрк░рк╢рлНркирлЛ ркЕрккрк▓рлЛркб ркХрк░рлНркпрк╛!")
                st.rerun()
        except Exception as e:
            st.error(f"Error uploading file: {str(e)}")
    
    # Instructions
    st.header("ЁЯУЦ How to Use / ркХрлЗрк╡рлА рк░рлАркдрлЗ ркЙрккркпрлЛркЧ ркХрк░рк╡рлЛ")
    
    with st.expander("ЁЯУЛ CSV Format Instructions / CSV рклрлЛрк░рлНркорлЗркЯ рк╕рлВркЪркирк╛ркУ"):
        st.markdown("""
        Your CSV file should contain the following columns:
        
        | Column | Description | Example |
        |--------|-------------|---------|
        | subject | Subject name | ркЧркгрк┐ркд |
        | question_type | MCQ, Paragraph, or Diagram | MCQ |
        | question | The question text | What is 2+2? |
        | options | For MCQ (comma-separated) | A) 3, B) 4, C) 5, D) 6 |
        | correct_answer | Correct answer | B) 4 |
        | importance | Most Important, Important, Normal | Most Important |
        | diagram_required | Yes/No | No |
        """)

if __name__ == "__main__":
    main()
